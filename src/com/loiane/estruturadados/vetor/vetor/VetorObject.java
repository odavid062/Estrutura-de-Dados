package com.loiane.estruturadados.vetor.vetor;

public class VetorObject {

    // ðŸ”¹ Array interno que armazena os elementos do vetor (tipo genÃ©rico Object)
    private Object[] elementos;

    // ðŸ”¹ Controla quantos elementos foram adicionados (tamanho lÃ³gico do vetor)
    private int tamanho;

    // ðŸ”¸ Construtor que define a capacidade inicial do vetor
    public VetorObject(int capacidade) {
        this.elementos = new Object[capacidade]; // cria o array com o tamanho definido
        this.tamanho = 0; // vetor comeÃ§a vazio
    }

    // ðŸ”¸ Adiciona elemento ao final do vetor
    public boolean adiciona(Object elemento) {
        this.aumentaCapacidade(); // verifica se precisa aumentar capacidade antes de adicionar
        if (this.tamanho < this.elementos.length) {
            this.elementos[this.tamanho] = elemento; // adiciona no final
            this.tamanho++; // atualiza o tamanho lÃ³gico
            return true;
        }
        return false; // caso nÃ£o consiga adicionar
    }

    // ðŸ”¸ Adiciona elemento em uma posiÃ§Ã£o especÃ­fica
    public boolean adiciona(int posicao, Object elemento) {
        // valida se a posiÃ§Ã£o estÃ¡ dentro do intervalo vÃ¡lido
        if (!(posicao >= 0 && posicao < tamanho)) {
            throw new IllegalArgumentException("PosiÃ§Ã£o invÃ¡lida");
        }

        this.aumentaCapacidade(); // aumenta capacidade se necessÃ¡rio

        // desloca os elementos da posiÃ§Ã£o atÃ© o final uma posiÃ§Ã£o para frente
        for (int i = this.tamanho - 1; i >= posicao; i--) {
            this.elementos[i + 1] = this.elementos[i];
        }

        this.elementos[posicao] = elemento; // insere o novo elemento
        this.tamanho++; // atualiza o tamanho lÃ³gico
        return true;
    }

    // ðŸ”¸ MÃ©todo auxiliar que dobra a capacidade do array quando ele estiver cheio
    private void aumentaCapacidade() {
        if (this.tamanho == this.elementos.length) {
            Object[] elementosNovos = new Object[this.elementos.length * 2]; // dobra o tamanho
            for (int i = 0; i < this.elementos.length; i++) {
                elementosNovos[i] = this.elementos[i]; // copia os elementos
            }
            this.elementos = elementosNovos; // substitui pelo novo array maior
        }
    }

    // ðŸ”¸ Busca um elemento pela posiÃ§Ã£o (Ã­ndice)
    public Object busca(int posicao) {
        if (!(posicao >= 0 && posicao < tamanho)) {
            throw new IllegalArgumentException("PosiÃ§Ã£o invÃ¡lida");
        }
        return this.elementos[posicao]; // retorna o elemento da posiÃ§Ã£o desejada
    }

    // ðŸ”¸ Remove um elemento da posiÃ§Ã£o especificada
    public void remove(int posicao) {
        if (!(posicao >= 0 && posicao < tamanho)) {
            throw new IllegalArgumentException("PosiÃ§Ã£o invÃ¡lida");
        }

        // desloca os elementos Ã  direita para a esquerda para preencher o "buraco"
        for (int i = posicao; i < this.tamanho - 1; i++) {
            this.elementos[i] = this.elementos[i + 1];
        }

        // limpa o Ãºltimo elemento (agora fora do tamanho lÃ³gico)
        this.elementos[this.tamanho - 1] = null;
        this.tamanho--; // diminui o tamanho lÃ³gico
    }

    // ðŸ”¸ Busca a posiÃ§Ã£o de um elemento especÃ­fico (por valor)
    public int busca2(Object elemento) {
        for (int i = 0; i < this.tamanho; i++) {
            if (this.elementos[i].equals(elemento)) {
                return i; // retorna a posiÃ§Ã£o do primeiro elemento igual
            }
        }
        return -1; // nÃ£o encontrado
    }

    // ðŸ”¸ Retorna a quantidade de elementos armazenados no vetor
    public int tamanho() {
        return this.tamanho;
    }

    // ðŸ”¸ Retorna uma representaÃ§Ã£o em String do vetor, Ãºtil para debug e exibiÃ§Ã£o
    @Override
    public String toString() {
        StringBuilder s = new StringBuilder(); // cria uma string eficiente
        s.append("[");

        for (int i = 0; i < this.tamanho - 1; i++) {
            s.append(this.elementos[i]);
            s.append(",");
        }

        if (this.tamanho > 0) {
            s.append(this.elementos[this.tamanho - 1]); // Ãºltimo sem vÃ­rgula
        }

        s.append("]");
        return s.toString();
    }
}
