package com.loiane.estruturadados.vetor.vetor;

// ðŸ’¬ Classe Vetor: estrutura de dados bÃ¡sica que armazena elementos em um array dinÃ¢mico
public class Vetor {

    private String[] elementos; // ðŸ’¬ Array de Strings para armazenar os dados
    private int tamanho;        // ðŸ’¬ NÃºmero de elementos atualmente armazenados

    // ðŸ’¬ Construtor: inicializa o vetor com uma capacidade inicial
    public Vetor(int capacidade) {
        this.elementos = new String[capacidade];
        this.tamanho = 0;
    }

    /*
    VersÃ£o inicial de adiciona() (forÃ§ando encontrar posiÃ§Ã£o nula manualmente).
    Essa versÃ£o foi substituÃ­da por mÃ©todos mais inteligentes que controlam 'tamanho'.
    */

    /*
    Segunda versÃ£o (adiciona com Exception): melhor ainda, mas vocÃª quis melhorar mais e automatizar expansÃ£o.
    */

    // ðŸ’¬ VersÃ£o final: adiciona elemento e expande capacidade automaticamente
    public boolean adiciona(String elemento) {
        this.aumentaCapacidade(); // Verifica e dobra a capacidade se necessÃ¡rio
        if (this.tamanho < this.elementos.length) {
            this.elementos[this.tamanho] = elemento;
            this.tamanho++;
            return true;
        }
        return false;
    }

    // ðŸ’¬ Adiciona elemento em posiÃ§Ã£o especÃ­fica, movendo os outros para frente
    public boolean adiciona(int posicao, String elemento) {
        if (!(posicao >= 0 && posicao < tamanho)) {
            throw new IllegalArgumentException("Posi\u00e7\u00e3o inv\u00e1lida");
        }

        this.aumentaCapacidade();

        // Move os elementos para frente, abrindo espaÃ§o na posiÃ§Ã£o desejada
        for (int i = this.tamanho - 1; i >= posicao; i--) {
            this.elementos[i + 1] = this.elementos[i];
        }
        this.elementos[posicao] = elemento;
        this.tamanho++;

        return true;
    }

    // ðŸ’¬ Aumenta capacidade do vetor se necessÃ¡rio (dobrando o tamanho)
    private void aumentaCapacidade() {
        if (this.tamanho == this.elementos.length) {
            String[] elementosNovos = new String[this.elementos.length * 2];
            for (int i = 0; i < this.elementos.length; i++) {
                elementosNovos[i] = this.elementos[i];
            }
            this.elementos = elementosNovos;
        }
    }

    // ðŸ’¬ Busca elemento pela posiÃ§Ã£o (Ã­ndice)
    public String busca(int posicao) {
        if (!(posicao >= 0 && posicao < tamanho)) {
            throw new IllegalArgumentException("PosiÃ§Ã£o invÃ¡lida");
        }
        return this.elementos[posicao];
    }

// B D E F F  -> posicÃ§Ã£o a ser removida Ã© 1 (G)
// 0 1 2 3 4  -> tamanho do vetor Ã© 5
// vetor [1] = vetor [2]
// vetor [2] = vetor [3]
// vetor [3] = vetor [4]
public void remove(int posicao ){
    if (!(posicao >= 0 && posicao < tamanho )) {
        throw new IllegalArgumentException("PosicÃ£o invalida ");
 }
    for (int i = posicao; i<this.tamanho-1 ; i++) {
        this.elementos[i] = this.elementos[i+1];
    }
    this.tamanho--;

}



    // ðŸ’¬ Busca elemento pelo valor (conteÃºdo)
    public int busca2(String elemento) {
        for (int i = 0; i < this.tamanho; i++) {
            if (this.elementos[i].equals(elemento)) {
                return i;
            }
        }
        return -1; // NÃ£o encontrou
    }

    // ðŸ’¬ Retorna o tamanho atual (quantidade de elementos vÃ¡lidos no vetor)
    public int tamanho() {
        return this.tamanho;
    }

    // ðŸ’¬ Representa o vetor como uma String bonita para exibiÃ§Ã£o
    @Override
    public String toString() {
        StringBuilder s = new StringBuilder();
        s.append("[");

        for (int i = 0; i < this.tamanho - 1; i++) {
            s.append(this.elementos[i]);
            s.append(",");
        }
        if (this.tamanho > 0) {
            s.append(this.elementos[this.tamanho - 1]);
        }

        s.append("]");
        return s.toString();
    }
}
